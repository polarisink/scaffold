server:
  port: 8067
  tomcat:
    uri-encoding: utf-8
  servlet:
    context-path: /scaffold

spring:
  mvc:
    throw-exception-if-no-handler-found: true
    pathmatch:
      matching-strategy: ant_path_matcher
  application:
    name: scaffold-dev
  datasource:
    url: jdbc:mysql://localhost:3307/scaffold?autoRec&useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai&useSSL=false&allowPublicKeyRetrieval=true
    username: root
    password: 654321
    driver-class-name: com.mysql.cj.jdbc.Driver
  cache:
    redis:
      time-to-live: 3d
      use-key-prefix: true
  jpa:
    database: mysql
    show-sql: false
    hibernate:
      ddl-auto: update
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL5Dialect
        format_sql: true
        session_factory:
  servlet:
    multipart:
      max-file-size: 100MB #单个文件的最大上限
      max-request-size: 100MB #单个请求的文件总大小上限
  web:
    resources:
      add-mappings: false
  data:
    redis:
      host: 10.1.20.116
      port: 6379

logging:
  level:
    root: info
    org.hibernate.SQL: debug
    org.hibernate.engine.QueryParameters: debug
    org.hibernate.engine.query.HQLQueryPlan: debug
    org.hibernate.type.descriptor.sql.BasicBinder: trace
  config: classpath:log4j2-spring.xml

mqtt:
  url: tcp://127.0.0.1:18084
  username: admin
  password: public
  produce-client-id: produce_${random.value}
  consume-client-id: consume_${random.value}
  default-topic: scaffold

minio:
  endpoint: http://127.0.0.1:8071
  accessKey: miniouser
  secretKey: miniouser
  bucket: data

double-cache:
  allow-null: true
  init: 100
  max: 1000
  expire-after-write: 1000
  expire-after-access: 1000
  refresh-after-write: 1000
  redis-expire: 1000

rocketmq:
  name-server: 127.0.0.1:9876
  producer:
    group: GID_Pro_Group
    send-message-timeout: 3000
    retry-times-when-send-async-failed: 3
    enable-msg-trace: true
#  consumer:
#    access-key: ${ROCKET_USER}
#    secret-key: ${ROCKET_SECRET}


#easy-es:
#  enable: true #默认为true,若为false则认为不启用本框架
#  address : 127.0.0.1:9200 # es的连接地址,必须含端口 若为集群,则可以用逗号隔开 例如:127.0.0.1:9200,127.0.0.2:9200
#  username: elastic #若无 则可省略此行配置
#  password: WG7WVmuNMtM4GwNYkyWH #若无 则可省略此行配置

okhttp:
  connect-timeout: 1
  read-timeout: 3
  write-timeout: 3
  max-idle-connections: 200
  keep-alive-duration: 300

